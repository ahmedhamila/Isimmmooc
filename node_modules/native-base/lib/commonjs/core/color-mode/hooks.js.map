{"version":3,"sources":["hooks.tsx"],"names":["useColorMode","colorMode","colorModeContext","React","useContext","HybridContext","undefined","Error","useColorModeValue","light","dark","useAppState","subscription","useMemo","getCurrentValue","AppState","currentState","subscribe","callback","subsription","addEventListener","removeEventListener","remove","isSSR","useColorScheme","colorScheme","currentScheme","setCurrentScheme","appState","useModeManager","initialColorMode","useSystemColorMode","colorModeManager","systemColorMode","setRawMode","setColorMode","useCallback","val","set","getMode","value","get","useAccessibleColors","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\nimport { AppState, useColorScheme as _useColorScheme } from 'react-native';\nimport { useSubscription } from 'use-subscription';\nimport { useNativeBaseConfig } from '../NativeBaseContext';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport const useAppState = () => {\n  const subscription = React.useMemo(\n    () => ({\n      getCurrentValue: () => AppState.currentState,\n      subscribe: (callback: () => void) => {\n        const subsription = AppState.addEventListener('change', callback);\n        return () => {\n          if (AppState.removeEventListener) {\n            // React Native < 0.65\n            AppState.removeEventListener('change', callback);\n          } else {\n            // React Native >= 0.65\n            // @ts-ignore:next-line ignoring ts error as devDependency contains \"@types/react-native\" < 0.65\n            subsription.remove();\n          }\n        };\n      },\n    }),\n    []\n  );\n\n  const isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n\n  if (isSSR) {\n    return 'unknown';\n  } else {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useSubscription(subscription);\n  }\n};\n\nexport const useColorScheme = () => {\n  const colorScheme = _useColorScheme();\n  const [currentScheme, setCurrentScheme] = useState(colorScheme);\n  const appState = useAppState();\n\n  useEffect(() => {\n    if (appState === 'active') {\n      setCurrentScheme(colorScheme);\n    }\n  }, [appState, colorScheme]);\n\n  return currentScheme;\n};\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  useSystemColorMode: boolean | undefined,\n  colorModeManager?: StorageManager\n) {\n  const systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  const setColorMode = React.useCallback(\n    async (val: ColorMode) => {\n      if (colorModeManager) {\n        await colorModeManager.set(val);\n      }\n      setRawMode(val);\n    },\n    [colorModeManager]\n  );\n\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  // Set system color mode only when user has not passed a colorModeManager\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"]}