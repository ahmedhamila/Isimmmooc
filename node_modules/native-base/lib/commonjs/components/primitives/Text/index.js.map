{"version":3,"sources":["index.tsx"],"names":["StyledText","NativeText","TextAncestorContext","React","createContext","Text","children","props","ref","hasTextAncestor","useContext","isTruncated","noOfLines","bold","italic","sub","highlight","underline","strikeThrough","fontFamily","propFontFamily","fontWeight","propFontWeight","fontStyle","propFontStyle","_hover","fontSize","numberOfLines","resolvedProps","resolveResponsively","componentTheme","undefined","_ref","isHovered","resolvedFontFamily","Platform","OS","propsToSpread","bg","textDecorationLine"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef, useRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { ITextProps } from './types';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils/mergeRefs';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\nimport { Platform, Text as NativeText } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyledText = makeStyledComponent(NativeText);\n// To have a RN compatible behaviour, we'll inherit parent text styles as base style\nconst TextAncestorContext = React.createContext(false);\n\nconst Text = ({ children, ...props }: ITextProps, ref: any) => {\n  const hasTextAncestor = React.useContext(TextAncestorContext);\n\n  const {\n    isTruncated,\n    noOfLines,\n    bold,\n    italic,\n    sub,\n    highlight,\n    underline,\n    strikeThrough,\n    fontFamily: propFontFamily,\n    fontWeight: propFontWeight,\n    fontStyle: propFontStyle,\n    _hover,\n    fontSize,\n    numberOfLines,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Text',\n    props,\n    {},\n    {\n      resolveResponsively: ['noOfLines', 'numberOfLines'],\n      // We override the component base theme if text has an ancestor.\n      componentTheme: hasTextAncestor ? {} : undefined,\n    }\n  );\n\n  const _ref = useRef(null);\n  // TODO: might have to add this condition\n  const { isHovered } = useHover({}, _hover ? _ref : null);\n  // const { isHovered } = useHover({}, _ref);\n  let fontFamily = propFontFamily;\n  const fontStyle = italic ? 'italic' : propFontStyle;\n  const fontWeight = bold ? 'bold' : propFontWeight;\n  let resolvedFontFamily;\n\n  resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight ?? (hasTextAncestor ? undefined : 400),\n    fontStyle: fontStyle ?? (hasTextAncestor ? undefined : 'normal'),\n  });\n\n  if (resolvedFontFamily) {\n    fontFamily = resolvedFontFamily;\n  }\n  // Need to apply fontWeight & fontStyle on web\n  if (Platform.OS === 'web') {\n    if (resolvedFontFamily) {\n      fontFamily = resolvedFontFamily.fontFamily;\n    }\n\n    resolvedFontFamily = {\n      fontFamily,\n      fontWeight: fontWeight ?? (hasTextAncestor ? undefined : 400),\n      fontStyle: fontStyle ?? (hasTextAncestor ? undefined : 'normal'),\n    };\n  }\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const propsToSpread = {\n    ...resolvedProps,\n    numberOfLines:\n      numberOfLines || noOfLines\n        ? numberOfLines || noOfLines\n        : isTruncated\n        ? 1\n        : undefined,\n    ...resolvedFontFamily,\n    bg: highlight ? 'warning.300' : resolvedProps.bg,\n    textDecorationLine:\n      underline && strikeThrough\n        ? 'underline line-through'\n        : underline\n        ? 'underline'\n        : strikeThrough\n        ? 'line-through'\n        : resolvedProps.textDecorationLine,\n    fontSize: sub ? 10 : fontSize,\n    ref: mergeRefs([ref, _ref]),\n    ...(isHovered && _hover),\n  };\n\n  return hasTextAncestor ? (\n    <StyledText {...propsToSpread}>{children}</StyledText>\n  ) : (\n    <TextAncestorContext.Provider value={true}>\n      <StyledText {...propsToSpread}>{children}</StyledText>\n    </TextAncestorContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(Text));\nexport type { ITextProps };\n"]}