{"version":3,"sources":["ButtonGroup.tsx"],"names":["children","divider","variant","props","ref","space","direction","size","colorScheme","isDisabled","isAttached","newProps","borderRadius","computedChildren","Array","isArray","React","Children","toArray","map","child","index","cloneElement","key","borderTopRadius","borderLeftRadius","length","borderBottomRadius","borderRightRadius","borderTopWidth","borderLeftWidth"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IButtonGroupProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Stack } from '../Stack';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport default memo(\n  forwardRef(\n    (\n      { children, divider, variant, ...props }: IButtonGroupProps,\n      ref?: any\n    ) => {\n      const {\n        space,\n        direction,\n\n        size,\n        colorScheme,\n        isDisabled,\n        isAttached,\n        ...newProps\n      } = usePropsResolution('ButtonGroup', props);\n\n      const { borderRadius } = usePropsResolution('Button', props);\n      let computedChildren;\n\n      if (Array.isArray(children)) {\n        computedChildren = React.Children.toArray(children).map(\n          (child: any, index: number) => {\n            if (typeof child === 'string' || typeof child === 'number')\n              return child;\n            return React.cloneElement(child, {\n              key: `button-group-child-${index}`,\n              variant,\n              size,\n              colorScheme,\n              isDisabled,\n\n              // when buttons are attached, remove rounded corners of all buttons except extreme buttons\n              ...(isAttached ? { borderRadius: 0 } : {}),\n              ...(isAttached && index === 0\n                ? direction === 'column'\n                  ? { borderTopRadius: borderRadius }\n                  : { borderLeftRadius: borderRadius }\n                : {}),\n              ...(isAttached && index === children?.length - 1\n                ? direction === 'column'\n                  ? { borderBottomRadius: borderRadius }\n                  : { borderRightRadius: borderRadius }\n                : {}),\n\n              //when buttons are attached, remove double border from them, just keep borderRight in case for direction row and borderBottom in case of direction column for every component\n              ...(isAttached && index !== 0\n                ? direction === 'column'\n                  ? { borderTopWidth: 0 }\n                  : { borderLeftWidth: 0 }\n                : {}),\n              ...child.props,\n            });\n          }\n        );\n      } else {\n        computedChildren = React.Children.toArray(children).map(\n          (child: any, index: number) => {\n            return React.cloneElement(child, {\n              key: `button-group-child-${index}`,\n              variant,\n              size,\n              colorScheme,\n              isDisabled,\n              ...child.props,\n            });\n          }\n        );\n      }\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n      return (\n        <Stack\n          divider={divider}\n          space={isAttached ? 0 : space}\n          direction={direction}\n          {...newProps}\n          ref={ref}\n        >\n          {computedChildren}\n        </Stack>\n      );\n    }\n  )\n);\n"]}