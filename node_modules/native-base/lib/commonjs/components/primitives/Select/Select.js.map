{"version":3,"sources":["Select.tsx"],"names":["SelectContext","React","createContext","onValueChange","selectedValue","_selectedItem","_item","Select","isHovered","isHoveredProp","isFocused","isFocusedProp","isFocusVisible","isFocusVisibleProp","variant","props","ref","selectProps","isDisabled","nativeID","flatListData","disabled","tempFix","_ref","useRef","isOpen","setIsOpen","useState","setIsFocused","focusProps","hoverProps","children","dropdownIcon","dropdownCloseIcon","dropdownOpenIcon","placeholder","accessibilityLabel","defaultValue","onOpen","onClose","optimized","_customDropdownIconProps","_actionSheet","_actionSheetContent","_actionSheetBody","_webSelect","resolvedProps","undefined","value","setValue","onChange","newValue","itemsList","Children","toArray","map","child","label","selectedItemArray","filter","item","selectedItem","length","contextValue","useMemo","rightIcon","handleClose","push","layoutProps","nonLayoutProps","stylingProps","margin","flexbox","position","commonInput","Platform","OS","Keyboard","dismiss","index","toString","isSelected","selected","readOnly","required","e","target"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport type { ISelectProps } from './types';\nimport { Platform, Keyboard } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport Box from '../Box';\nimport { Input } from '../Input';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useControllableState } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { useFormControl } from '../../composites/FormControl';\nimport { ChevronDownIcon } from '../Icon/Icons';\nimport type { IButtonProps } from '../Button/types';\nimport { ScrollView } from '../../basic/ScrollView';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { FlatList } from '../../basic/FlatList';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ISelectItemProps } from './types';\nimport { Pressable } from '../Pressable';\n\nexport const SelectContext = React.createContext({\n  onValueChange: (() => {}) as any,\n  selectedValue: null as any,\n  _selectedItem: {} as IButtonProps,\n  _item: {} as IButtonProps,\n});\n\nconst Select = (\n  {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    variant,\n    ...props\n  }: ISelectProps,\n  ref: any\n) => {\n  const selectProps = useFormControl({\n    isDisabled: props.isDisabled,\n    nativeID: props.nativeID,\n  });\n  const flatListData: ISelectItemProps[] = [];\n\n  const isDisabled = selectProps.disabled;\n  const tempFix = '__NativebasePlaceholder__';\n  const _ref = React.useRef(null);\n\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [isFocused, setIsFocused] = React.useState<boolean>(false);\n\n  const { focusProps, isFocusVisible } = useFocusRing();\n  const { hoverProps, isHovered } = useHover({ isDisabled }, _ref);\n\n  const {\n    onValueChange,\n    selectedValue,\n    children,\n    dropdownIcon,\n    dropdownCloseIcon,\n    dropdownOpenIcon,\n    placeholder,\n    accessibilityLabel,\n    defaultValue,\n    _item,\n    _selectedItem,\n    onOpen,\n    onClose,\n    optimized,\n    _customDropdownIconProps,\n    _actionSheet,\n    _actionSheetContent,\n    _actionSheetBody,\n    _webSelect,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Select',\n    props,\n    {\n      isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    },\n    undefined\n  );\n\n  const [value, setValue] = useControllableState({\n    value: selectedValue,\n    defaultValue,\n    onChange: (newValue) => {\n      onValueChange && onValueChange(newValue);\n      setIsOpen(false);\n    },\n  });\n\n  const itemsList: Array<{\n    label: string;\n    value: string;\n  }> = React.Children.toArray(children).map((child: any) => {\n    return {\n      label: child?.props?.label,\n      value: child?.props?.value,\n    };\n  });\n\n  const selectedItemArray = itemsList.filter(\n    (item: any) => item?.value === value\n  );\n\n  const selectedItem =\n    selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n\n  const contextValue = React.useMemo(() => {\n    return {\n      onValueChange: setValue,\n      selectedValue: value,\n      _selectedItem: _selectedItem ?? {},\n      _item: _item ?? {},\n    };\n  }, [value, setValue, _selectedItem, _item]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const rightIcon =\n    isOpen && dropdownOpenIcon ? (\n      dropdownOpenIcon\n    ) : !isOpen && dropdownCloseIcon ? (\n      dropdownCloseIcon\n    ) : dropdownIcon ? (\n      dropdownIcon\n    ) : (\n      <ChevronDownIcon {..._customDropdownIconProps} />\n    );\n\n  const handleClose = () => {\n    setIsOpen(false);\n    onClose && onClose();\n  };\n\n  if (optimized) {\n    React.Children.toArray(children).map((child: any) => {\n      flatListData.push(child.props);\n    });\n  }\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    'shadow',\n    'opacity',\n  ]);\n\n  const commonInput = (\n    <Input\n      placeholder={placeholder}\n      InputRightElement={rightIcon}\n      {...nonLayoutProps}\n      // NOTE: Adding ts-ignore as we're not exposing isFocused in the Input component\n      // @ts-ignore-next-line\n      isFocused={isFocused}\n      isHovered={isHovered}\n      aria-hidden={true}\n      importantForAccessibility=\"no\"\n      value={selectedItem ? selectedItem.label : ''}\n      editable={false}\n      focusable={false}\n      isDisabled={isDisabled}\n      pointerEvents=\"none\"\n      variant={variant}\n    />\n  );\n\n  return Platform.OS === 'android' || Platform.OS === 'ios' ? (\n    <>\n      <Pressable\n        onPress={() => {\n          Keyboard.dismiss();\n          setIsOpen(true);\n          onOpen && onOpen();\n        }}\n        disabled={isDisabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        ref={mergeRefs([ref, _ref])}\n        {...layoutProps}\n      >\n        {commonInput}\n      </Pressable>\n      <Actionsheet isOpen={isOpen} onClose={handleClose} {..._actionSheet}>\n        <Actionsheet.Content {..._actionSheetContent}>\n          {/* TODO: Replace ScrollVeiw with FlatList */}\n          {optimized ? (\n            <FlatList\n              {..._actionSheetBody}\n              data={flatListData}\n              // eslint-disable-next-line no-shadow\n              keyExtractor={(_item, index) => index.toString()}\n              renderItem={({ item }: any) => {\n                const isSelected = selectedValue === item?.value;\n                return (\n                  <Actionsheet.Item\n                    onPress={() => {\n                      if (!isDisabled) {\n                        setValue(item?.value);\n                      }\n                    }}\n                    accessibilityState={{ selected: isSelected }}\n                    {...item}\n                    {..._item}\n                    {...(isSelected && _selectedItem)}\n                  >\n                    {item?.label}\n                  </Actionsheet.Item>\n                );\n              }}\n            />\n          ) : (\n            <ScrollView {..._actionSheetBody}>\n              <SelectContext.Provider value={contextValue}>\n                {children}\n              </SelectContext.Provider>\n            </ScrollView>\n          )}\n        </Actionsheet.Content>\n      </Actionsheet>\n    </>\n  ) : (\n    <Box {...layoutProps}>\n      {/* <Box w=\"100%\" h=\"100%\" position=\"absolute\" opacity=\"0\" zIndex={1}> */}\n      <select\n        aria-readonly={selectProps.readOnly}\n        required={selectProps.required}\n        disabled={isDisabled}\n        {...focusProps}\n        {...hoverProps}\n        ref={mergeRefs([ref, _ref])}\n        //@ts-ignore\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n        value={selectedItem === null ? tempFix : value}\n        aria-label={placeholder}\n        onFocus={() => {\n          setIsFocused(true);\n          onOpen && onOpen();\n        }}\n        onBlur={() => {\n          setIsFocused(false);\n          onClose && onClose();\n        }}\n        {..._webSelect}\n      >\n        <option disabled value={tempFix}>\n          {placeholder}\n        </option>\n        {children}\n      </select>\n      {/* </Box> */}\n      {commonInput}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Select));\n"]}