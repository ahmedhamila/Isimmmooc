{"version":3,"sources":["Radio.web.tsx"],"names":["RadioComponent","icon","inputProps","combinedProps","children","wrapperRef","isHovered","isHoveredProp","isPressed","isPressedProp","isFocused","isFocusedProp","isFocusVisible","isFocusVisibleProp","props","ref","isInvalid","isReadOnly","isIndeterminate","disabled","isDisabled","checked","isChecked","_ref","React","useRef","mergedRefs","focusProps","setFocused","useState","setPressed","handleFocus","handleBlur","handlePressIn","handlePressOut","_interactionBox","_icon","_stack","_text","resolvedProps","sizedIcon","cloneElement","component","Radio","formControlContext","contextState","useContext","RadioContext","inputRef","radioState","accessibilityLabel","state","useMemo","contextCombinedProps","console","error"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\n//@ts-ignore\nimport stableHash from 'stable-hash';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { useFormControlContext } from '../../composites/FormControl';\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isPressed: isPressedProp,\n        isFocused: isFocusedProp,\n        isFocusVisible: isFocusVisibleProp,\n        ...props\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n      const _ref = React.useRef(null);\n      const { isHovered } = useHover({}, _ref);\n      const mergedRefs = mergeRefs([_ref, wrapperRef]);\n      const { focusProps, isFocusVisible } = useFocusRing();\n      const [isFocused, setFocused] = React.useState(isFocusedProp);\n      const [isPressed, setPressed] = React.useState(isPressedProp);\n      const handleFocus = () => {\n        setFocused(true);\n      };\n      const handleBlur = () => {\n        isFocusedProp ? setFocused(true) : setFocused(false);\n      };\n      const handlePressIn = () => {\n        setPressed(true);\n      };\n\n      const handlePressOut = () => {\n        isPressedProp ? setPressed(true) : setPressed(false);\n      };\n      const {\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution('Radio', combinedProps, {\n        isInvalid,\n        isReadOnly,\n        isFocusVisible: isFocusVisibleProp || isFocused || isFocusVisible,\n        isDisabled,\n        isIndeterminate,\n        isChecked,\n        isHovered: isHoveredProp || isHovered,\n        isPressed,\n        isFocused,\n      });\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      const component = (\n        <Stack {..._stack}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Radio */}\n            <Center {...resolvedProps}>\n              {icon && sizedIcon && isChecked ? (\n                sizedIcon()\n              ) : (\n                <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n              )}\n            </Center>\n          </Center>\n          {wrapStringChild(children, _text)}\n        </Stack>\n      );\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n\n      return (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={mergedRefs}\n        >\n          <div onMouseDown={handlePressIn} onMouseUp={handlePressOut}>\n            <VisuallyHidden>\n              <input\n                {...inputProps}\n                {...focusProps}\n                ref={ref}\n                onFocus={handleFocus}\n                onBlur={handleBlur}\n              />\n            </VisuallyHidden>\n            {component}\n          </div>\n        </Box>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const contextCombinedProps = React.useMemo(() => {\n    return { ...combinedProps };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableHash(combinedProps)]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isPressed={isPressed}\n      isFocused={isFocusedProp}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]}