{"version":3,"sources":["index.tsx"],"names":["IconButton","icon","_icon","pseudoIconProp","children","isHovered","isHoveredProp","isPressed","isPressedProp","isFocused","isFocusedProp","isFocusVisible","isFocusVisibleProp","isDisabled","props","ref","hoverProps","pressableProps","focusProps","focusRingProps","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","resolvedProps","clonedIcon","React","cloneElement"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAKA;;AACA;;;;;;;;;;AAEA,MAAMA,UAAU,GAAG,CACjB;AACEC,EAAAA,IADF;AAEEC,EAAAA,KAAK,EAAEC,cAFT;AAGEC,EAAAA,QAHF;AAIEC,EAAAA,SAAS,EAAEC,aAJb;AAKEC,EAAAA,SAAS,EAAEC,aALb;AAMEC,EAAAA,SAAS,EAAEC,aANb;AAOEC,EAAAA,cAAc,EAAEC,kBAPlB;AAQEC,EAAAA,UARF;AASE,KAAGC;AATL,CADiB,EAYjBC,GAZiB,KAad;AACH,QAAM;AAAEC,IAAAA,UAAF;AAAcX,IAAAA;AAAd,MAA4B,2BAAlC;AACA,QAAM;AAAEY,IAAAA,cAAF;AAAkBV,IAAAA;AAAlB,MAAgC,+BAAtC;AACA,QAAM;AAAEW,IAAAA,UAAF;AAAcT,IAAAA;AAAd,MAA4B,2BAAlC;AACA,QAAM;AAAEE,IAAAA,cAAF;AAAkBO,IAAAA,UAAU,EAAEC;AAA9B,MAAsD,0BAA5D;AAEA,QAAM;AACJjB,IAAAA,KADI;AAEJkB,IAAAA,SAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA,OANI;AAOJC,IAAAA,MAPI;AAQJ,OAAGC;AARC,MASF,uCACF,YADE,EAEF,EAAE,GAAGZ,KAAL;AAAYZ,IAAAA,KAAK,EAAE,qBAAM,EAAN,EAAUC,cAAV,EAA0BF,IAA1B,aAA0BA,IAA1B,uBAA0BA,IAAI,CAAEa,KAAhC;AAAnB,GAFE,EAGF;AACET,IAAAA,SAAS,EAAEC,aAAa,IAAID,SAD9B;AAEEE,IAAAA,SAAS,EAAEC,aAAa,IAAID,SAF9B;AAGEE,IAAAA,SAAS,EAAEC,aAAa,IAAID,SAH9B;AAIEE,IAAAA,cAAc,EAAEC,kBAAkB,IAAID,cAJxC;AAKEE,IAAAA;AALF,GAHE,CATJ;AAqBA,MAAIc,UAAJ;;AACA,MAAI1B,IAAJ,EAAU;AACR0B,IAAAA,UAAU,gBAAGC,eAAMC,YAAN,CAAmB5B,IAAnB,EAAyB,EACpC,GAAGC;AADiC,KAAzB,CAAb;AAGD,GAhCE,CAkCH;;;AACA,MAAI,kDAAsBY,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,sBACE,6BAAC,oBAAD;AACE,IAAA,QAAQ,EAAED,UADZ;AAEE,IAAA,iBAAiB,EAAC,QAFpB;AAGE,IAAA,GAAG,EAAEE,GAHP;AAIE,IAAA,SAAS,EAAE,iCAAqBK,SAArB,EAAgCH,cAAc,CAACG,SAA/C,CAJb;AAKE,IAAA,UAAU,EAAE,iCAAqBC,UAArB,EAAiCJ,cAAc,CAACI,UAAhD,CALd,CAME;AANF;AAOE,IAAA,SAAS,EAAE,iCAAqBC,SAArB,EAAgCN,UAAU,CAACM,SAA3C,CAPb,CAQE;AARF;AASE,IAAA,UAAU,EAAE,iCAAqBC,UAArB,EAAiCP,UAAU,CAACO,UAA5C,CATd,CAUE;AAVF;AAWE,IAAA,OAAO,EAAE,iCACP,iCAAqBC,OAArB,EAA8BN,UAAU,CAACM,OAAzC,CADO,EAEPL,cAAc,CAACK,OAFR,CAXX,CAeE;AAfF;AAgBE,IAAA,MAAM,EAAE,iCACN,iCAAqBC,MAArB,EAA6BP,UAAU,CAACO,MAAxC,CADM,EAENN,cAAc,CAACM,MAFT;AAhBV,KAoBMC,aApBN,GAsBGC,UAAU,iBAAI,6BAAC,UAAD,EAAUzB,KAAV,EAAkBE,QAAlB,CAtBjB,CADF;AA0BD,CA9ED;;4BAgFe,+BAAK,uBAAWJ,UAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Pressable } from '../../primitives/Pressable';\nimport { Icon } from '../../primitives/Icon';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { composeEventHandlers } from '../../../utils';\nimport type { IIconButtonProps } from './types';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport merge from 'lodash.merge';\n\nconst IconButton = (\n  {\n    icon,\n    _icon: pseudoIconProp,\n    children,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    isDisabled,\n    ...props\n  }: IIconButtonProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution(\n    'IconButton',\n    { ...props, _icon: merge({}, pseudoIconProp, icon?.props) },\n    {\n      isHovered: isHoveredProp || isHovered,\n      isPressed: isPressedProp || isPressed,\n      isFocused: isFocusedProp || isFocused,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n      isDisabled,\n    }\n  );\n\n  let clonedIcon;\n  if (icon) {\n    clonedIcon = React.cloneElement(icon, {\n      ..._icon,\n    });\n  }\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Pressable\n      disabled={isDisabled}\n      accessibilityRole=\"button\"\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n    >\n      {clonedIcon || <Icon {..._icon}>{children}</Icon>}\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(IconButton));\nexport type { IIconButtonProps };\n"]}