{"version":3,"sources":["Popover.tsx"],"names":["Popover","onOpen","trigger","onClose","isOpen","isOpenProp","children","defaultIsOpen","initialFocusRef","finalFocusRef","useRNModal","trapFocus","_backdrop","props","ref","triggerRef","React","useRef","mergedRef","setIsOpen","value","defaultValue","onChange","bodyMounted","setBodyMounted","useState","headerMounted","setHeaderMounted","id","responsiveQueryContext","useContext","ResponsiveQueryContext","disableCSSMediaQueries","popoverContentId","headerId","bodyId","handleOpen","useCallback","updatedTrigger","undefined","open","handleClose","opacity","transition","duration","scale","StyleSheet","absoluteFill"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { Popper } from '../Popper';\nimport type { IPopoverProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { useControllableState } from '../../../hooks';\nimport { PopoverContext } from './PopoverContext';\nimport Box from '../../primitives/Box';\nimport Backdrop from '../Backdrop';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { PresenceTransition } from '../Transitions';\nimport { StyleSheet } from 'react-native';\nimport { useId } from '@react-native-aria/utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { uniqueId } from 'lodash';\nimport { ResponsiveQueryContext } from '../../../utils/useResponsiveQuery/ResponsiveQueryProvider';\n\nconst Popover = (\n  {\n    onOpen,\n    trigger,\n    onClose,\n    isOpen: isOpenProp,\n    children,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    useRNModal,\n    trapFocus = true,\n    _backdrop,\n    ...props\n  }: IPopoverProps,\n  ref: any\n) => {\n  const triggerRef = React.useRef(null);\n  const mergedRef = mergeRefs([triggerRef]);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: (value) => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    },\n  });\n\n  const [bodyMounted, setBodyMounted] = React.useState(false);\n  const [headerMounted, setHeaderMounted] = React.useState(false);\n  let id = uniqueId();\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  if (!disableCSSMediaQueries) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    id = useId();\n  }\n\n  const popoverContentId = `${id}-content`;\n  const headerId = `${popoverContentId}-header`;\n  const bodyId = `${popoverContentId}-body`;\n\n  const handleOpen = React.useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  const updatedTrigger = () => {\n    return trigger(\n      {\n        'ref': mergedRef,\n        'onPress': handleOpen,\n        'aria-expanded': isOpen ? true : false,\n        'aria-controls': isOpen ? popoverContentId : undefined,\n        'aria-haspopup': true,\n      },\n      { open: isOpen }\n    );\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box ref={ref}>\n      {updatedTrigger()}\n      <Overlay\n        isOpen={isOpen}\n        onRequestClose={handleClose}\n        useRNModalOnAndroid\n        useRNModal={useRNModal}\n        unmountOnExit\n      >\n        <PresenceTransition\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1, transition: { duration: 150 } }}\n          exit={{ opacity: 0, scale: 0.95, transition: { duration: 100 } }}\n          visible={isOpen}\n          style={StyleSheet.absoluteFill}\n        >\n          <Popper onClose={handleClose} triggerRef={triggerRef} {...props}>\n            <Backdrop onPress={handleClose} bg=\"transparent\" {..._backdrop} />\n            <PopoverContext.Provider\n              value={{\n                onClose: handleClose,\n                initialFocusRef,\n                finalFocusRef,\n                popoverContentId,\n                bodyId,\n                headerId,\n                headerMounted,\n                bodyMounted,\n                setBodyMounted,\n                setHeaderMounted,\n                isOpen,\n              }}\n            >\n              <FocusScope contain={trapFocus} restoreFocus autoFocus>\n                {children}\n              </FocusScope>\n            </PopoverContext.Provider>\n          </Popper>\n        </PresenceTransition>\n      </Overlay>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Popover));\n"]}