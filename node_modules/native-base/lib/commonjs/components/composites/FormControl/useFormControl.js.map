{"version":3,"sources":["useFormControl.tsx"],"names":["FormControlContext","React","createContext","useFormControlProvider","props","nativeID","idProp","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","id","responsiveQueryContext","useContext","ResponsiveQueryContext","disableCSSMediaQueries","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","useState","hasHelpText","setHasHelpText","context","useFormControl","field","useFormControlContext","describedBy","push","ariaDescribedBy","join","cleanProps","disabled","readOnly","required","accessibilityInvalid","accessibilityRequired","accessibilityReadOnly","accessibilityDescribedBy","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useId } from '@react-native-aria/utils';\nimport omit from 'lodash.omit';\nimport type { IFormControlProps } from './types';\nimport { ariaAttr } from '../../../utils';\nimport { ResponsiveQueryContext } from '../../../utils/useResponsiveQuery/ResponsiveQueryProvider';\nimport { uniqueId } from 'lodash';\n\nexport type IFormControlContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  'htmlProps'\n>;\n\nexport const FormControlContext = React.createContext({});\n\nexport function useFormControlProvider(props: IFormControlProps) {\n  const {\n    nativeID: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props;\n\n  let id = uniqueId();\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  if (!disableCSSMediaQueries) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    id = useId();\n  }\n\n  // const id = '';\n  // Generate all the required ids\n  const nativeID = idProp || `field-${id}`;\n\n  const labelId = `${nativeID}-label`;\n  const feedbackId = `${nativeID}-feedback`;\n  const helpTextId = `${nativeID}-helptext`;\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = React.useState(false);\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = React.useState(false);\n\n  const context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    nativeID,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n  };\n\n  return context;\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n */\nexport function useFormControl(props: IFormControlProps) {\n  const field = useFormControlContext();\n  const describedBy: any[] = [];\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText) describedBy.push(field?.feedbackId);\n  if (field?.hasHelpText) describedBy.push(field?.helpTextId);\n  const ariaDescribedBy = describedBy.join(' ');\n\n  const cleanProps = omit(props, [\n    'isInvalid',\n    'isDisabled',\n    'isReadOnly',\n    'isRequired',\n  ]);\n\n  let nativeID = props?.nativeID;\n\n  if (!nativeID && field?.nativeID) {\n    nativeID = `${field?.nativeID}-input`;\n  }\n\n  return {\n    ...cleanProps,\n    nativeID: nativeID,\n    disabled: props.isDisabled || field?.isDisabled,\n    readOnly: props.isReadOnly || field?.isReadOnly,\n    required: props.isRequired || field?.isRequired,\n    accessibilityInvalid: ariaAttr(props.isInvalid || field?.isInvalid),\n    accessibilityRequired: ariaAttr(props.isRequired || field?.isRequired),\n    accessibilityReadOnly: ariaAttr(props.isReadOnly || field?.isReadOnly),\n    accessibilityDescribedBy: ariaDescribedBy || undefined,\n  };\n}\n\nexport const useFormControlContext = () => {\n  return (React.useContext(\n    FormControlContext\n  ) as unknown) as IFormControlContext;\n};\n"]}