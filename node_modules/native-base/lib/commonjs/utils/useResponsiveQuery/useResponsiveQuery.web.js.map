{"version":3,"sources":["useResponsiveQuery.web.tsx"],"names":["textContentMap","useResponsiveQuery","queries","responsiveQueryContext","React","useContext","ResponsiveQueryContext","disableCSSMediaQueries","windowWidth","enable","width","values","getResponsiveStyles","styles","dataSet","getDataAttribute","queryRule","minWidth","maxWidth","undefined","getMediaQueryRule","query","newRule","queryString","queriesHash","initial","StyleSheet","create","flatten","styleSheet","insert","rule","window","styleEl","document","createElement","type","appendChild","createTextNode","head","sheet","insertRule","cssRules","length","forEach","queryHash","dataAttribute","newIdentifier","mediaRules","flattenQueryStyle","style","newStyle","compiledStyle","compiledOrderedRules","$$css","Object","keys","key","oldIdentifier","rules","_order","includes","replace","mediaQueryRule","getStyleElement","__html","join"],"mappings":"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","sourcesContent":["// import { atomic } from 'react-native-web/dist/exports/StyleSheet/compiler';\nimport { atomic } from '../react-native-web-fucntions/atomic';\nimport preprocess from '../react-native-web-fucntions/preprocess';\nimport type {\n  DataSet,\n  Query,\n  UseResponsiveQueryParams,\n  UseResponsiveQueryReturnType,\n  GetResponsiveStylesParams,\n} from './types';\nimport { StyleSheet } from 'react-native';\n// @ts-ignore\nimport stableHash from 'stable-hash';\nimport hash from './hash';\nimport type { GetResponsiveStylesReturnType } from './types';\nimport { useStableMemo } from './useStableMemo';\nimport { getResponsiveStylesImpl, useDimensionsWithEnable } from './common';\nimport { ResponsiveQueryContext } from './ResponsiveQueryProvider';\nimport React from 'react';\n\n/******************** Implementation after RNW v0.18 ***********************/\n\n/**\n * 1. preprocess:- Handles shadow/text shadow conversion from RN styles to web *                 styles\n *\n * 2. atomic:- it handles prefixing, converting RN specific styles to web styles *             and generating the CSS selector.\n *             Input {marginTop: 10}\n *             Output\n *             compiledStyle : marginTop: \"r-marginTop-156q2ks\"\n *             compiledOrderedRules : \".r-marginTop-156q2ks{margin-top:10px;}\"\n *      a)compiledStyle:- Array it holds identifier/selector with properties\n *      b)compiledOrderedRules:- Array it holds the css rule with selector name\n *      Also from RNW v0.18 handles swapping of ltr styles if enabled by user\n * 3. createSheet:- used to grab sheet which exist already created by rnw. when we *                  call createSheet without id it will return sheet which exist. *                  cause it automatically takes a default ID  which is already in *                  use (created by rnw with default ID) so this return sheet *                  which exist with  ID doesn't create a new sheet.\n *\n * This Implementation is based on asumptions that RNW doesn't change the         * function  or doesn't re-write them. if there is any change in RNW implmentation * it we'll break and needs to be updated.\n *\n */\nlet textContentMap: any = {};\n\nexport const useResponsiveQuery = (\n  queries?: UseResponsiveQueryParams\n): UseResponsiveQueryReturnType => {\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries =\n    queries?.disableCSSMediaQueries ??\n    responsiveQueryContext.disableCSSMediaQueries;\n\n  // Only attaches listener if disableCSSMediaQueries is true\n  const windowWidth = useDimensionsWithEnable({\n    enable: disableCSSMediaQueries,\n  }).width;\n\n  const values = useStableMemo(() => {\n    // Use the non-media query responsive styling\n    if (disableCSSMediaQueries) {\n      const getResponsiveStyles = getResponsiveStylesImpl(windowWidth);\n      if (queries) {\n        const { styles } = getResponsiveStyles(queries);\n        return { styles, getResponsiveStyles };\n      } else {\n        return { getResponsiveStyles };\n      }\n    } else {\n      if (queries) {\n        const { styles, dataSet } = getResponsiveStyles(queries);\n        return { dataSet, styles, getResponsiveStyles };\n      } else {\n        return { getResponsiveStyles };\n      }\n    }\n  }, [queries, windowWidth, disableCSSMediaQueries]);\n\n  return values;\n};\n\nconst getDataAttribute = (queryRule: Query) => {\n  if (\n    typeof queryRule.minWidth === 'number' &&\n    typeof queryRule.maxWidth === 'number'\n  ) {\n    return `min-width-${queryRule.minWidth}-max-width-${queryRule.maxWidth}`;\n  } else if (typeof queryRule.minWidth === 'number') {\n    return `min-width-${queryRule.minWidth}`;\n  } else if (typeof queryRule.maxWidth === 'number') {\n    return `max-width-${queryRule.maxWidth}`;\n  }\n\n  return undefined;\n};\n\nconst getMediaQueryRule = (query: Query, newRule: string) => {\n  if (\n    typeof query.minWidth === 'number' &&\n    typeof query.maxWidth === 'number'\n  ) {\n    return `@media only screen and (min-width: ${query.minWidth}px) and (max-width: ${query.maxWidth}px) { ${newRule} }`;\n  } else if (typeof query.minWidth === 'number') {\n    return `@media only screen and (min-width: ${query.minWidth}px) { ${newRule} }`;\n  } else if (typeof query.maxWidth === 'number') {\n    return `@media only screen and (max-width: ${query.maxWidth}px) { ${newRule} }`;\n  }\n  return undefined;\n};\n\nconst getResponsiveStyles = (\n  queries: GetResponsiveStylesParams\n): GetResponsiveStylesReturnType => {\n  const queryString = stableHash(queries.query);\n  const queriesHash = hash(queryString);\n\n  const styles = queries.initial\n    ? [\n        StyleSheet.create({ initial: StyleSheet.flatten(queries.initial) })\n          .initial,\n      ]\n    : undefined;\n\n  let dataSet: DataSet = {};\n  let styleSheet: any;\n\n  /**\n   * This function is copied from intergalacticspacehighway/rnw-responsive-ssr\n   */\n  const insert = (rule: string) => {\n    if (typeof window !== 'undefined') {\n      if (!styleSheet) {\n        const styleEl = document.createElement('style');\n        styleEl.type = 'text/css';\n        styleEl.appendChild(document.createTextNode(''));\n        document.head.appendChild(styleEl);\n        styleSheet = styleEl.sheet;\n      }\n\n      styleSheet.insertRule(rule, styleSheet.cssRules.length);\n    }\n  };\n\n  if (queries.query) {\n    queries.query.forEach((queryRule) => {\n      const queryHash = queriesHash + hash(stableHash(queryRule));\n      const dataAttribute = getDataAttribute(queryRule);\n\n      if (dataAttribute) {\n        const newIdentifier = `[data-${dataAttribute}$=\"${queryHash}\"]`;\n        dataSet[dataAttribute] = queryHash;\n\n        let mediaRules = '';\n\n        const flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n        const newStyle = preprocess(flattenQueryStyle);\n        const [compiledStyle, compiledOrderedRules] = atomic(newStyle);\n        //@ts-ignore\n        delete compiledStyle.$$css; //removing unnecessary $$css property\n        Object.keys(compiledStyle).forEach((key) => {\n          const oldIdentifier = compiledStyle[key];\n          compiledOrderedRules.forEach(([rules, _order]: any) => {\n            // Rule returned by atomic has css selectors, so we'll replace it with data-attr selector\n\n            let newRule = '';\n            if (rules[0].includes(oldIdentifier)) {\n              newRule = rules[0].replace('.' + oldIdentifier, newIdentifier);\n            }\n            mediaRules += newRule;\n          });\n        });\n        if (mediaRules) {\n          const mediaQueryRule = getMediaQueryRule(queryRule, mediaRules);\n          insert(`/*${queryHash}{}*/${mediaQueryRule}`);\n          textContentMap[`/*${queryHash}{}*/${mediaQueryRule}`] = true;\n        }\n      }\n    });\n  }\n\n  return { styles, dataSet };\n};\n\n/**\n * This function is copied from intergalacticspacehighway/rnw-responsive-ssr\n */\nexport const getStyleElement = () => {\n  return (\n    <style\n      type=\"text/css\"\n      dangerouslySetInnerHTML={{ __html: Object.keys(textContentMap).join('') }}\n    />\n  );\n};\n"]}