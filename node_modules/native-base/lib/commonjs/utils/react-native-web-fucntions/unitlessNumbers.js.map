{"version":3,"sources":["unitlessNumbers.ts"],"names":["unitlessNumbers","animationIterationCount","aspectRatio","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","flex","flexGrow","flexOrder","flexPositive","flexShrink","flexNegative","fontWeight","gridRow","gridRowEnd","gridRowGap","gridRowStart","gridColumn","gridColumnEnd","gridColumnGap","gridColumnStart","lineClamp","opacity","order","orphans","tabSize","widows","zIndex","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","scale","scaleX","scaleY","scaleZ","shadowOpacity","prefixes","prefixKey","prefix","key","charAt","toUpperCase","substring","Object","keys","forEach","prop"],"mappings":";;;;;;;AAAA;AACA;AACA;AAEA,MAAMA,eAAoB,GAAG;AAC3BC,EAAAA,uBAAuB,EAAE,IADE;AAE3BC,EAAAA,WAAW,EAAE,IAFc;AAG3BC,EAAAA,iBAAiB,EAAE,IAHQ;AAI3BC,EAAAA,gBAAgB,EAAE,IAJS;AAK3BC,EAAAA,gBAAgB,EAAE,IALS;AAM3BC,EAAAA,OAAO,EAAE,IANkB;AAO3BC,EAAAA,YAAY,EAAE,IAPa;AAQ3BC,EAAAA,eAAe,EAAE,IARU;AAS3BC,EAAAA,WAAW,EAAE,IATc;AAU3BC,EAAAA,IAAI,EAAE,IAVqB;AAW3BC,EAAAA,QAAQ,EAAE,IAXiB;AAY3BC,EAAAA,SAAS,EAAE,IAZgB;AAa3BC,EAAAA,YAAY,EAAE,IAba;AAc3BC,EAAAA,UAAU,EAAE,IAde;AAe3BC,EAAAA,YAAY,EAAE,IAfa;AAgB3BC,EAAAA,UAAU,EAAE,IAhBe;AAiB3BC,EAAAA,OAAO,EAAE,IAjBkB;AAkB3BC,EAAAA,UAAU,EAAE,IAlBe;AAmB3BC,EAAAA,UAAU,EAAE,IAnBe;AAoB3BC,EAAAA,YAAY,EAAE,IApBa;AAqB3BC,EAAAA,UAAU,EAAE,IArBe;AAsB3BC,EAAAA,aAAa,EAAE,IAtBY;AAuB3BC,EAAAA,aAAa,EAAE,IAvBY;AAwB3BC,EAAAA,eAAe,EAAE,IAxBU;AAyB3BC,EAAAA,SAAS,EAAE,IAzBgB;AA0B3BC,EAAAA,OAAO,EAAE,IA1BkB;AA2B3BC,EAAAA,KAAK,EAAE,IA3BoB;AA4B3BC,EAAAA,OAAO,EAAE,IA5BkB;AA6B3BC,EAAAA,OAAO,EAAE,IA7BkB;AA8B3BC,EAAAA,MAAM,EAAE,IA9BmB;AA+B3BC,EAAAA,MAAM,EAAE,IA/BmB;AAgC3BC,EAAAA,IAAI,EAAE,IAhCqB;AAiC3B;AACAC,EAAAA,WAAW,EAAE,IAlCc;AAmC3BC,EAAAA,YAAY,EAAE,IAnCa;AAoC3BC,EAAAA,WAAW,EAAE,IApCc;AAqC3BC,EAAAA,eAAe,EAAE,IArCU;AAsC3BC,EAAAA,gBAAgB,EAAE,IAtCS;AAuC3BC,EAAAA,gBAAgB,EAAE,IAvCS;AAwC3BC,EAAAA,aAAa,EAAE,IAxCY;AAyC3BC,EAAAA,WAAW,EAAE,IAzCc;AA0C3B;AACAC,EAAAA,KAAK,EAAE,IA3CoB;AA4C3BC,EAAAA,MAAM,EAAE,IA5CmB;AA6C3BC,EAAAA,MAAM,EAAE,IA7CmB;AA8C3BC,EAAAA,MAAM,EAAE,IA9CmB;AA+C3B;AACAC,EAAAA,aAAa,EAAE;AAhDY,CAA7B;AAmDA;AACA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAG,CAAC,IAAD,EAAO,KAAP,EAAc,GAAd,EAAmB,QAAnB,CAAjB;;AACA,MAAMC,SAAS,GAAG,CAACC,MAAD,EAAiBC,GAAjB,KAAiC;AACjD,SAAOD,MAAM,GAAGC,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,EAAT,GAAuCF,GAAG,CAACG,SAAJ,CAAc,CAAd,CAA9C;AACD,CAFD;;AAGAC,MAAM,CAACC,IAAP,CAAYtD,eAAZ,EAA6BuD,OAA7B,CAAsCC,IAAD,IAAU;AAC7CV,EAAAA,QAAQ,CAACS,OAAT,CAAkBP,MAAD,IAAY;AAC3BhD,IAAAA,eAAe,CAAC+C,SAAS,CAACC,MAAD,EAASQ,IAAT,CAAV,CAAf,GAA2CxD,eAAe,CAACwD,IAAD,CAA1D;AACD,GAFD;AAGD,CAJD;eAMexD,e","sourcesContent":["/* eslint-disable */\n//@ts-nocheck\n// This functions is taken from react native web\n\nconst unitlessNumbers: any = {\n  animationIterationCount: true,\n  aspectRatio: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  flex: true,\n  flexGrow: true,\n  flexOrder: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  fontWeight: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowGap: true,\n  gridRowStart: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnGap: true,\n  gridColumnStart: true,\n  lineClamp: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n  // SVG-related\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true,\n  // transform types\n  scale: true,\n  scaleX: true,\n  scaleY: true,\n  scaleZ: true,\n  // RN properties\n  shadowOpacity: true,\n};\n\n/**\n * Support style names that may come passed in prefixed by adding permutations\n * of vendor prefixes.\n */\nconst prefixes = ['ms', 'Moz', 'O', 'Webkit'];\nconst prefixKey = (prefix: string, key: string) => {\n  return prefix + key.charAt(0).toUpperCase() + key.substring(1);\n};\nObject.keys(unitlessNumbers).forEach((prop) => {\n  prefixes.forEach((prefix) => {\n    unitlessNumbers[prefixKey(prefix, prop)] = unitlessNumbers[prop];\n  });\n});\n\nexport default unitlessNumbers;\n"]}