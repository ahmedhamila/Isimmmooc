{"version":3,"sources":["preprocess.ts"],"names":["emptyObject","defaultOffset","height","width","createBoxShadowValue","style","shadowColor","shadowOffset","shadowOpacity","shadowRadius","offsetX","offsetY","blurRadius","color","createTextShadowValue","textShadowColor","textShadowOffset","textShadowRadius","radius","preprocess","originalStyle","nextStyle","originalProp","originalValue","prop","value","Object","prototype","hasOwnProperty","call","boxShadowValue","boxShadow","textShadowValue","textShadow"],"mappings":"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","sourcesContent":["/* eslint-disable */\n//@ts-nocheck\n// This functions is taken from react native web\n\nimport normalizeColor from './normalizeColor';\nimport normalizeValueWithProperty from './normalizeValueWithProperty';\n\nconst emptyObject = {};\n\n/**\n * Shadows\n */\n\nconst defaultOffset = { height: 0, width: 0 };\n\nexport const createBoxShadowValue = (style: any): void | string => {\n  const { shadowColor, shadowOffset, shadowOpacity, shadowRadius } = style;\n  const { height, width } = shadowOffset || defaultOffset;\n  const offsetX = normalizeValueWithProperty(width);\n  const offsetY = normalizeValueWithProperty(height);\n  const blurRadius = normalizeValueWithProperty(shadowRadius || 0);\n  const color = normalizeColor(shadowColor || 'black', shadowOpacity);\n  if (\n    color != null &&\n    offsetX != null &&\n    offsetY != null &&\n    blurRadius != null\n  ) {\n    return `${offsetX} ${offsetY} ${blurRadius} ${color}`;\n  }\n};\n\nexport const createTextShadowValue = (style: any): void | string => {\n  const { textShadowColor, textShadowOffset, textShadowRadius } = style;\n  const { height, width } = textShadowOffset || defaultOffset;\n  const radius = textShadowRadius || 0;\n  const offsetX = normalizeValueWithProperty(width);\n  const offsetY = normalizeValueWithProperty(height);\n  const blurRadius = normalizeValueWithProperty(radius);\n  const color = normalizeValueWithProperty(textShadowColor, 'textShadowColor');\n\n  if (\n    color &&\n    (height !== 0 || width !== 0 || radius !== 0) &&\n    offsetX != null &&\n    offsetY != null &&\n    blurRadius != null\n  ) {\n    return `${offsetX} ${offsetY} ${blurRadius} ${color}`;\n  }\n};\n\n/**\n * Preprocess styles\n */\nexport const preprocess = (originalStyle: any) => {\n  const style = originalStyle || emptyObject;\n  const nextStyle: any = {};\n  for (const originalProp in style) {\n    const originalValue = style[originalProp];\n\n    let prop = originalProp;\n    let value = originalValue;\n\n    if (\n      !Object.prototype.hasOwnProperty.call(style, originalProp) ||\n      originalValue == null\n    ) {\n      continue;\n    }\n\n    if (prop === 'elevation') continue;\n    // Convert shadow styles\n    if (\n      prop === 'shadowColor' ||\n      prop === 'shadowOffset' ||\n      prop === 'shadowOpacity' ||\n      prop === 'shadowRadius'\n    ) {\n      const boxShadowValue = createBoxShadowValue(style);\n\n      if (boxShadowValue != null && nextStyle.boxShadow == null) {\n        const { boxShadow } = style;\n        prop = 'boxShadow';\n        value = boxShadow ? `${boxShadow}, ${boxShadowValue}` : boxShadowValue;\n      } else {\n        continue;\n      }\n    }\n\n    // Convert text shadow styles\n    if (\n      prop === 'textShadowColor' ||\n      prop === 'textShadowOffset' ||\n      prop === 'textShadowRadius'\n    ) {\n      const textShadowValue = createTextShadowValue(style);\n      if (textShadowValue != null && nextStyle.textShadow == null) {\n        const { textShadow } = style;\n        prop = 'textShadow';\n        value = textShadow\n          ? `${textShadow}, ${textShadowValue}`\n          : textShadowValue;\n      } else {\n        continue;\n      }\n    }\n\n    nextStyle[prop] = value;\n  }\n\n  // $FlowIgnore\n  return nextStyle;\n};\n\nexport default preprocess;\n"]}