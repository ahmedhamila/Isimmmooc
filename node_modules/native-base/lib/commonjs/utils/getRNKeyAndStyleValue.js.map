{"version":3,"sources":["getRNKeyAndStyleValue.ts"],"names":["getRNKeyAndStyleValue","config","value","key","theme","styledSystemProps","currentBreakpoint","style","property","scale","properties","transformer","val","fontSize","endsWith","parseFloat","Platform","OS","breakpoints","fontSizes","forEach"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA;AACA;AACA;AACO,MAAMA,qBAAqB,GAAG,CAAC;AACpCC,EAAAA,MADoC;AAEpCC,EAAAA,KAFoC;AAGpCC,EAAAA,GAHoC;AAIpCC,EAAAA,KAJoC;AAKpCC,EAAAA,iBALoC;AAMpCC,EAAAA;AANoC,CAAD,KAO1B;AACT,MAAIC,KAAU,GAAG,EAAjB;;AACA,MAAIN,MAAM,KAAK,IAAf,EAAqB;AACnBM,IAAAA,KAAK,GAAG,EACN,GAAGA,KADG;AAEN,OAACJ,GAAD,GAAO,8DAA4BA,GAA5B,EAAiCD,KAAjC;AAFD,KAAR;AAID,GALD,MAKO,IAAID,MAAJ,EAAY;AACjB;AACA,UAAM;AAAEO,MAAAA,QAAF;AAAYC,MAAAA,KAAZ;AAAmBC,MAAAA,UAAnB;AAA+BC,MAAAA;AAA/B,QAA+CV,MAArD;AACA,QAAIW,GAAG,GAAGV,KAAV;;AAEA,QAAIS,WAAJ,EAAiB;AACfC,MAAAA,GAAG,GAAGD,WAAW,CAACC,GAAD,EAAMR,KAAK,CAACK,KAAD,CAAX,EAAoBL,KAApB,EAA2BC,iBAAiB,CAACQ,QAA7C,CAAjB;AACD,KAFD,MAEO;AACL;AACAD,MAAAA,GAAG,GAAG,qBAAIR,KAAK,CAACK,KAAD,CAAT,EAAkBP,KAAlB,EAAyBA,KAAzB,CAAN;AACD;;AAED,QAAI,OAAOU,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAIA,GAAG,CAACE,QAAJ,CAAa,IAAb,CAAJ,EAAwB;AACtBF,QAAAA,GAAG,GAAGG,UAAU,CAACH,GAAD,CAAhB;AACD,OAFD,MAEO,IAAIA,GAAG,CAACE,QAAJ,CAAa,IAAb,KAAsBE,sBAASC,EAAT,KAAgB,KAA1C,EAAiD;AACtD,cAAMJ,QAAQ,GAAG,uCACfR,iBAAiB,CAACQ,QADH,EAEfT,KAAK,CAACc,WAFS,EAGfZ,iBAHe,EAIfH,GAJe,CAAjB;AAMAS,QAAAA,GAAG,GACDG,UAAU,CAACH,GAAD,CAAV,GACAG,UAAU,CAAC,qBAAIX,KAAK,CAACe,SAAV,EAAqBN,QAArB,EAA+BA,QAA/B,CAAD,CAFZ;AAGD;AACF;;AAEDD,IAAAA,GAAG,GAAG,8DAA4BT,GAA5B,EAAiCS,GAAjC,CAAN;;AAEA,QAAIF,UAAJ,EAAgB;AACd;AACAA,MAAAA,UAAU,CAACU,OAAX,CAAoBZ,QAAD,IAAc;AAC/BD,QAAAA,KAAK,GAAG,EACN,GAAGA,KADG;AAEN,WAACC,QAAD,GAAYI;AAFN,SAAR;AAID,OALD;AAMD,KARD,MAQO,IAAIJ,QAAJ,EAAc;AACnBD,MAAAA,KAAK,GAAG,EACN,GAAGA,KADG;AAEN,SAACC,QAAD,GAAYI;AAFN,OAAR;AAID,KALM,MAKA;AACLL,MAAAA,KAAK,GAAG,EACN,GAAGA,KADG;AAEN,WAAGK;AAFG,OAAR;AAID;AACF;;AAED,SAAOL,KAAP;AACD,CAlEM","sourcesContent":["import { Platform } from 'react-native';\nimport get from 'lodash.get';\nimport { convertStringNumberToNumber } from './convertStringNumberToNumber';\nimport { resolveValueWithBreakpoint } from '../hooks/useThemeProps/utils';\n\n/**\n * Common Logic Sharing between useSx and useStyledSytem\n */\nexport const getRNKeyAndStyleValue = ({\n  config,\n  value,\n  key,\n  theme,\n  styledSystemProps,\n  currentBreakpoint,\n}: any) => {\n  let style: any = {};\n  if (config === true) {\n    style = {\n      ...style,\n      [key]: convertStringNumberToNumber(key, value),\n    };\n  } else if (config) {\n    //@ts-ignore\n    const { property, scale, properties, transformer } = config;\n    let val = value;\n\n    if (transformer) {\n      val = transformer(val, theme[scale], theme, styledSystemProps.fontSize);\n    } else {\n      // If a token is not found in the theme\n      val = get(theme[scale], value, value);\n    }\n\n    if (typeof val === 'string') {\n      if (val.endsWith('px')) {\n        val = parseFloat(val);\n      } else if (val.endsWith('em') && Platform.OS !== 'web') {\n        const fontSize = resolveValueWithBreakpoint(\n          styledSystemProps.fontSize,\n          theme.breakpoints,\n          currentBreakpoint,\n          key\n        );\n        val =\n          parseFloat(val) *\n          parseFloat(get(theme.fontSizes, fontSize, fontSize));\n      }\n    }\n\n    val = convertStringNumberToNumber(key, val);\n\n    if (properties) {\n      //@ts-ignore\n      properties.forEach((property) => {\n        style = {\n          ...style,\n          [property]: val,\n        };\n      });\n    } else if (property) {\n      style = {\n        ...style,\n        [property]: val,\n      };\n    } else {\n      style = {\n        ...style,\n        ...val,\n      };\n    }\n  }\n\n  return style;\n};\n"]}