{"version":3,"sources":["normalizeColor.ts"],"names":["ConvertNumberIntoHex","processColor","color","undefined","int32Color","isWebColor","indexOf","normalizeColor","opacity","colorInt","r","g","b","a","alpha","toFixed"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,oBAAP,MAAiC,qBAAjC;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAsB;AACzC,MAAIA,KAAK,KAAKC,SAAV,IAAuBD,KAAK,KAAK,IAArC,EAA2C;AACzC,WAAOA,KAAP;AACD,GAHwC,CAKzC;;;AACA,MAAIE,UAAU,GAAGJ,oBAAoB,CAACE,KAAD,CAArC;;AACA,MAAIE,UAAU,KAAKD,SAAf,IAA4BC,UAAU,KAAK,IAA/C,EAAqD;AACnD,WAAOD,SAAP;AACD,GATwC,CAUzC;;;AACAC,EAAAA,UAAU,GAAG,CAAEA,UAAU,IAAI,EAAf,GAAsBA,UAAU,KAAK,CAAtC,MAA8C,CAA3D;AAEA,SAAOA,UAAP;AACD,CAdD;;AAgBA,MAAMC,UAAU,GAAIH,KAAD,IACjBA,KAAK,KAAK,cAAV,IACAA,KAAK,KAAK,cADV,IAEAA,KAAK,KAAK,SAFV,IAGAA,KAAK,CAACI,OAAN,CAAc,MAAd,MAA0B,CAJ5B;;AAMA,MAAMC,cAAc,GAAG,CACrBL,KADqB,EAErBM,OAAe,GAAG,CAFG,KAGH;AAClB,MAAIN,KAAK,IAAI,IAAb,EAAmB;;AAEnB,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BG,UAAU,CAACH,KAAD,CAA3C,EAAoD;AAClD,WAAOA,KAAP;AACD;;AAED,QAAMO,QAAQ,GAAGR,YAAY,CAACC,KAAD,CAA7B;;AACA,MAAIO,QAAQ,IAAI,IAAhB,EAAsB;AACpB,UAAMC,CAAC,GAAID,QAAQ,IAAI,EAAb,GAAmB,GAA7B;AACA,UAAME,CAAC,GAAIF,QAAQ,IAAI,CAAb,GAAkB,GAA5B;AACA,UAAMG,CAAC,GAAGH,QAAQ,GAAG,GAArB;AACA,UAAMI,CAAC,GAAG,CAAEJ,QAAQ,IAAI,EAAb,GAAmB,GAApB,IAA2B,GAArC;AACA,UAAMK,KAAK,GAAG,CAACD,CAAC,GAAGL,OAAL,EAAcO,OAAd,CAAsB,CAAtB,CAAd;AACA,0BAAeL,CAAf,cAAoBC,CAApB,cAAyBC,CAAzB,cAA8BE,KAA9B;AACD;AACF,CAnBD;;AAqBA,eAAeP,cAAf","sourcesContent":["/* eslint-disable */\n//@ts-nocheck\n// This functions is taken from react native web\n\nimport ConvertNumberIntoHex from 'normalize-css-color';\n\nconst processColor = (color?: any): any => {\n  if (color === undefined || color === null) {\n    return color;\n  }\n\n  // convert number and hex\n  let int32Color = ConvertNumberIntoHex(color);\n  if (int32Color === undefined || int32Color === null) {\n    return undefined;\n  }\n  //@ts-ignore\n  int32Color = ((int32Color << 24) | (int32Color >>> 8)) >>> 0;\n\n  return int32Color;\n};\n\nconst isWebColor = (color: string): boolean =>\n  color === 'currentcolor' ||\n  color === 'currentColor' ||\n  color === 'inherit' ||\n  color.indexOf('var(') === 0;\n\nconst normalizeColor = (\n  color?: number | string,\n  opacity: number = 1\n): void | string => {\n  if (color == null) return;\n\n  if (typeof color === 'string' && isWebColor(color)) {\n    return color;\n  }\n\n  const colorInt = processColor(color);\n  if (colorInt != null) {\n    const r = (colorInt >> 16) & 255;\n    const g = (colorInt >> 8) & 255;\n    const b = colorInt & 255;\n    const a = ((colorInt >> 24) & 255) / 255;\n    const alpha = (a * opacity).toFixed(2);\n    return `rgba(${r},${g},${b},${alpha})`;\n  }\n};\n\nexport default normalizeColor;\n"]}