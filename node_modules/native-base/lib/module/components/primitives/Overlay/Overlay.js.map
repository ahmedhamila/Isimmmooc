{"version":3,"sources":["Overlay.tsx"],"names":["OverlayContainer","React","Modal","Platform","useKeyboardDismissable","ExitAnimationContext","Overlay","children","isOpen","useRNModal","useRNModalOnAndroid","isKeyboardDismissable","animationPreset","onRequestClose","style","unmountOnExit","exited","setExited","useState","enabled","callback","styleObj","overflow","display","OS"],"mappings":"AAAA;AACA,SAASA,gBAAT,QAAiC,6BAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,cAAhC;AACA,SAASC,sBAAT,QAAuC,gBAAvC;AACA,SAASC,oBAAT,QAAqC,wBAArC;AAeA,OAAO,SAASC,OAAT,CAAiB;AACtBC,EAAAA,QADsB;AAEtBC,EAAAA,MAFsB;AAGtBC,EAAAA,UAAU,GAAG,KAHS;AAItBC,EAAAA,mBAAmB,GAAG,KAJA;AAKtBC,EAAAA,qBAAqB,GAAG,IALF;AAMtB;AACAC,EAAAA,eAAe,GAAG,MAPI;AAQtBC,EAAAA,cARsB;AAStBC,EAAAA,KATsB;AAUtBC,EAAAA;AAVsB,CAAjB,EAWW;AAChB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBhB,KAAK,CAACiB,QAAN,CAAe,CAACV,MAAhB,CAA5B;AAEAJ,EAAAA,sBAAsB,CAAC;AACrBe,IAAAA,OAAO,EAAEX,MAAM,IAAIG,qBADE;AAErBS,IAAAA,QAAQ,EAAEP,cAAc,GAAGA,cAAH,GAAoB,MAAM,CAAE;AAF/B,GAAD,CAAtB;AAIA,QAAMQ,QAAQ,GAAG,EAAE,GAAGP;AAAL,GAAjB;;AACA,MAAIF,eAAe,KAAK,OAAxB,EAAiC;AAC/BS,IAAAA,QAAQ,CAACC,QAAT,GAAoB,QAApB;AACAD,IAAAA,QAAQ,CAACE,OAAT,GAAmB,MAAnB;AACD,GAHD,MAGO;AACLF,IAAAA,QAAQ,CAACE,OAAT,GAAmBP,MAAM,IAAI,CAACR,MAAX,GAAoB,MAApB,GAA6B,MAAhD;AACD;;AAED,MAAIO,aAAa,IAAI,CAACP,MAAlB,IAA4BQ,MAAhC,EAAwC;AACtC,WAAO,IAAP;AACD;;AAED,MAAIP,UAAU,IAAKC,mBAAmB,IAAIP,QAAQ,CAACqB,EAAT,KAAgB,SAA1D,EAAsE;AACpE,wBACE,oBAAC,oBAAD,CAAsB,QAAtB;AAA+B,MAAA,KAAK,EAAE;AAAER,QAAAA,MAAF;AAAUC,QAAAA;AAAV;AAAtC,oBACE,oBAAC,KAAD;AACE,MAAA,oBAAoB,MADtB;AAEE,MAAA,WAAW,MAFb;AAGE,MAAA,OAAO,EAAET,MAHX;AAIE,MAAA,cAAc,EAAEK,cAJlB;AAKE,MAAA,aAAa,EAAED;AALjB,OAOGL,QAPH,CADF,CADF;AAaD;;AAED,MAAIQ,aAAa,IAAI,CAACP,MAAlB,IAA4BQ,MAAhC,EAAwC;AACtC,WAAO,IAAP;AACD;;AAED;AAAA;AACE;AACA,wBAAC,gBAAD;AAAkB,MAAA,KAAK,EAAE,EAAE,GAAGK;AAAL;AAAzB,oBACE,oBAAC,oBAAD,CAAsB,QAAtB;AAA+B,MAAA,KAAK,EAAE;AAAEL,QAAAA,MAAF;AAAUC,QAAAA;AAAV;AAAtC,OACGV,QADH,CADF;AAFF;AAQD","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport type { ViewStyle } from 'react-native';\nimport { Modal, Platform } from 'react-native';\nimport { useKeyboardDismissable } from '../../../hooks';\nimport { ExitAnimationContext } from './ExitAnimationContext';\n\nexport interface IOverlayProps {\n  isOpen?: boolean;\n  children?: any;\n  // We use RN modal on android if needed as it supports shifting accessiblity focus to the opened view. IOS automatically shifts focus if an absolutely placed view appears in front.\n  useRNModalOnAndroid?: boolean;\n  useRNModal?: boolean;\n  onRequestClose?: any;\n  isKeyboardDismissable?: boolean;\n  animationPreset?: 'fade' | 'slide' | 'none';\n  style?: ViewStyle;\n  unmountOnExit?: boolean;\n}\n\nexport function Overlay({\n  children,\n  isOpen,\n  useRNModal = false,\n  useRNModalOnAndroid = false,\n  isKeyboardDismissable = true,\n  //@ts-ignore\n  animationPreset = 'fade',\n  onRequestClose,\n  style,\n  unmountOnExit,\n}: IOverlayProps) {\n  const [exited, setExited] = React.useState(!isOpen);\n\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : () => {},\n  });\n  const styleObj = { ...style };\n  if (animationPreset === 'slide') {\n    styleObj.overflow = 'hidden';\n    styleObj.display = 'flex';\n  } else {\n    styleObj.display = exited && !isOpen ? 'none' : 'flex';\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  if (useRNModal || (useRNModalOnAndroid && Platform.OS === 'android')) {\n    return (\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        <Modal\n          statusBarTranslucent\n          transparent\n          visible={isOpen}\n          onRequestClose={onRequestClose}\n          animationType={animationPreset}\n        >\n          {children}\n        </Modal>\n      </ExitAnimationContext.Provider>\n    );\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  return (\n    //@ts-ignore\n    <OverlayContainer style={{ ...styleObj }}>\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        {children}\n      </ExitAnimationContext.Provider>\n    </OverlayContainer>\n  );\n}\n"]}