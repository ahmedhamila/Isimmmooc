{"version":3,"sources":["Radio.tsx"],"names":["React","memo","forwardRef","stableHash","Pressable","Center","Box","Stack","usePropsResolution","wrapStringChild","useRadio","RadioContext","mergeRefs","CircleIcon","useHasResponsiveProps","composeEventHandlers","combineContextAndProps","isEmptyObj","extractInObject","stylingProps","useHover","useFocus","useIsPressed","useFormControlContext","RadioComponent","icon","inputProps","combinedProps","size","children","wrapperRef","isHovered","isHoveredProp","isPressed","isPressedProp","isFocused","isFocusedProp","ref","isInvalid","isReadOnly","isIndeterminate","hoverProps","pressableProps","focusProps","disabled","isDisabled","checked","isChecked","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","_interactionBox","_icon","_stack","_text","resolvedProps","cleanInputProps","margin","layout","flexbox","position","background","padding","border","sizedIcon","cloneElement","Radio","props","formControlContext","contextState","useContext","inputRef","useRef","radioState","accessibilityLabel","state","useMemo","contextCombinedProps","console","error"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\n//@ts-ignore\nimport stableHash from 'stable-hash';\nimport { Pressable, IPressableProps } from '../Pressable';\nimport { Center } from '../../composites/Center';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { useRadio } from '@react-native-aria/radio';\nimport { RadioContext } from './RadioGroup';\nimport { mergeRefs } from '../../../utils';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport {\n  composeEventHandlers,\n  combineContextAndProps,\n  isEmptyObj,\n} from '../../../utils';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFormControlContext } from '../../composites/FormControl';\n\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        size,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isPressed: isPressedProp,\n        isFocused: isFocusedProp,\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { hoverProps, isHovered } = useHover();\n      const { pressableProps, isPressed } = useIsPressed();\n      const { focusProps, isFocused } = useFocus();\n\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n\n      const {\n        onPressIn,\n        onPressOut,\n        onHoverIn,\n        onHoverOut,\n        onFocus,\n        onBlur,\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution(\n        'Radio',\n        {\n          ...combinedProps,\n          size,\n        },\n        {\n          isInvalid,\n          isReadOnly,\n          isDisabled,\n          isIndeterminate,\n          isChecked,\n          isHovered: isHoveredProp || isHovered,\n          isPressed: isPressedProp || isPressed,\n          isFocused: isFocusedProp || isFocused,\n        }\n      );\n\n      const [, cleanInputProps] = extractInObject(inputProps, [\n        ...stylingProps.margin,\n        ...stylingProps.layout,\n        ...stylingProps.flexbox,\n        ...stylingProps.position,\n        ...stylingProps.background,\n        ...stylingProps.padding,\n        ...stylingProps.border,\n        '_text',\n      ]);\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      return (\n        <Pressable\n          disabled={isDisabled}\n          {...pressableProps}\n          {...(cleanInputProps as IPressableProps)}\n          ref={mergeRefs([ref, wrapperRef])}\n          accessibilityRole=\"radio\"\n          onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n          onPressOut={composeEventHandlers(\n            onPressOut,\n            pressableProps.onPressOut\n          )}\n          // @ts-ignore - web only\n          onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n          // @ts-ignore - web only\n          onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n          // @ts-ignore - web only\n          onFocus={composeEventHandlers(\n            composeEventHandlers(onFocus, focusProps.onFocus)\n            // focusRingProps.onFocu\n          )}\n          // @ts-ignore - web only\n          onBlur={composeEventHandlers(\n            composeEventHandlers(onBlur, focusProps.onBlur)\n            // focusRingProps.onBlur\n          )}\n        >\n          <Stack {..._stack}>\n            <Center>\n              {/* Interaction Wrapper */}\n              <Box {..._interactionBox} />\n              {/* radio */}\n              <Center {...resolvedProps}>\n                {icon && sizedIcon && isChecked ? (\n                  sizedIcon()\n                ) : (\n                  <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n                )}\n              </Center>\n            </Center>\n            {/* Label */}\n            {wrapStringChild(children, _text)}\n          </Stack>\n        </Pressable>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    size,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const contextCombinedProps = React.useMemo(() => {\n    return { ...combinedProps };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableHash(combinedProps)]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      size={size}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isPressed={isPressedProp}\n      isFocused={isFocusedProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]}