{"version":3,"sources":["Tooltip.tsx"],"names":["OverlayContainer","React","useControllableState","useKeyboardDismissable","Popper","composeEventHandlers","mergeRefs","PresenceTransition","Platform","StyleSheet","usePropsResolution","Box","useId","useHasResponsiveProps","uniqueId","ResponsiveQueryContext","Tooltip","label","children","onClose","onOpen","defaultIsOpen","placement","openDelay","closeDelay","closeOnClick","offset","isDisabled","hasArrow","arrowSize","isOpen","isOpenProp","props","undefined","resolvedProps","setIsOpen","value","defaultValue","onChange","arrowBg","backgroundColor","bgColor","bg","targetRef","useRef","enterTimeout","exitTimeout","tooltipID","responsiveQueryContext","useContext","disableCSSMediaQueries","openWithDelay","useCallback","current","setTimeout","closeWithDelay","clearTimeout","useEffect","newChildren","cloneElement","onPress","onFocus","onBlur","onMouseEnter","onMouseLeave","ref","enabled","callback","opacity","transition","duration","absoluteFill","OS"],"mappings":";;AAAA,SAASA,gBAAT,QAAiC,6BAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,EAA+BC,sBAA/B,QAA6D,gBAA7D;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,oBAAT,EAA+BC,SAA/B,QAAgD,gBAAhD;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,cAArC;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AAEA,SAASC,KAAT,QAAsB,0BAAtB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,SAASC,sBAAT,QAAuC,2DAAvC;AAEA,OAAO,MAAMC,OAAO,GAAG,CAAC;AACtBC,EAAAA,KADsB;AAEtBC,EAAAA,QAFsB;AAGtBC,EAAAA,OAHsB;AAItBC,EAAAA,MAJsB;AAKtBC,EAAAA,aALsB;AAMtBC,EAAAA,SANsB;AAOtBC,EAAAA,SAAS,GAAG,CAPU;AAQtBC,EAAAA,UAAU,GAAG,CARS;AAStBC,EAAAA,YAAY,GAAG,IATO;AAUtBC,EAAAA,MAVsB;AAWtBC,EAAAA,UAXsB;AAYtBC,EAAAA,QAZsB;AAatBC,EAAAA,SAAS,GAAG,EAbU;AActBC,EAAAA,MAAM,EAAEC,UAdc;AAetB,KAAGC;AAfmB,CAAD,KAgBF;AAAA;;AACnB,MAAIJ,QAAQ,IAAIF,MAAM,KAAKO,SAA3B,EAAsC;AACpCP,IAAAA,MAAM,GAAG,CAAT;AACD,GAFD,MAEO;AACLA,IAAAA,MAAM,GAAG,CAAT;AACD;;AAED,QAAMQ,aAAa,GAAGxB,kBAAkB,CAAC,SAAD,EAAYsB,KAAZ,CAAxC;AACA,QAAM,CAACF,MAAD,EAASK,SAAT,IAAsBjC,oBAAoB,CAAC;AAC/CkC,IAAAA,KAAK,EAAEL,UADwC;AAE/CM,IAAAA,YAAY,EAAEhB,aAFiC;AAG/CiB,IAAAA,QAAQ,EAAGF,KAAD,IAAW;AACnBA,MAAAA,KAAK,GAAGhB,MAAM,IAAIA,MAAM,EAAnB,GAAwBD,OAAO,IAAIA,OAAO,EAA/C;AACD;AAL8C,GAAD,CAAhD;AAQA,QAAMoB,OAAO,6CACXP,KAAK,CAACQ,eADK,yEACcR,KAAK,CAACS,OADpB,yCAC+BT,KAAK,CAACU,EADrC,uCAC2CR,aAAa,CAACQ,EADtE;AAGA,QAAMC,SAAS,GAAG1C,KAAK,CAAC2C,MAAN,CAAa,IAAb,CAAlB;AAEA,QAAMC,YAAY,GAAG5C,KAAK,CAAC2C,MAAN,EAArB;AACA,QAAME,WAAW,GAAG7C,KAAK,CAAC2C,MAAN,EAApB,CAtBmB,CAuBnB;AACA;;AAEA,MAAIG,SAAS,GAAGjC,QAAQ,EAAxB,CA1BmB,CA4BnB;;AACA,QAAMkC,sBAAsB,GAAG/C,KAAK,CAACgD,UAAN,CAAiBlC,sBAAjB,CAA/B;AACA,QAAMmC,sBAAsB,GAAGF,sBAAsB,CAACE,sBAAtD;;AAEA,MAAI,CAACA,sBAAL,EAA6B;AAC3B;AACA;AACA;AACAH,IAAAA,SAAS,GAAGnC,KAAK,EAAjB;AACD;;AAED,QAAMuC,aAAa,GAAGlD,KAAK,CAACmD,WAAN,CAAkB,MAAM;AAC5C,QAAI,CAACzB,UAAL,EAAiB;AACfkB,MAAAA,YAAY,CAACQ,OAAb,GAAuBC,UAAU,CAAC,MAAMnB,SAAS,CAAC,IAAD,CAAhB,EAAwBZ,SAAxB,CAAjC;AACD;AACF,GAJqB,EAInB,CAACI,UAAD,EAAaQ,SAAb,EAAwBZ,SAAxB,CAJmB,CAAtB;AAMA,QAAMgC,cAAc,GAAGtD,KAAK,CAACmD,WAAN,CAAkB,MAAM;AAC7C,QAAIP,YAAY,CAACQ,OAAjB,EAA0B;AACxBG,MAAAA,YAAY,CAACX,YAAY,CAACQ,OAAd,CAAZ;AACD;;AACDP,IAAAA,WAAW,CAACO,OAAZ,GAAsBC,UAAU,CAAC,MAAMnB,SAAS,CAAC,KAAD,CAAhB,EAAyBX,UAAzB,CAAhC;AACD,GALsB,EAKpB,CAACA,UAAD,EAAaW,SAAb,CALoB,CAAvB;AAOAlC,EAAAA,KAAK,CAACwD,SAAN,CACE,MAAM,MAAM;AACVD,IAAAA,YAAY,CAACX,YAAY,CAACQ,OAAd,CAAZ;AACAG,IAAAA,YAAY,CAACV,WAAW,CAACO,OAAb,CAAZ;AACD,GAJH,EAKE,EALF;AAQA,MAAIK,WAAW,GAAGxC,QAAlB;;AAEA,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChCwC,IAAAA,WAAW,gBAAG,oBAAC,GAAD,QAAMxC,QAAN,CAAd;AACD;;AAEDwC,EAAAA,WAAW,gBAAGzD,KAAK,CAAC0D,YAAN,CAAmBD,WAAnB,EAAgC;AAC5C,eAAWrD,oBAAoB,CAAMqD,WAAW,CAAC1B,KAAZ,CAAkB4B,OAAxB,EAAiC,MAAM;AACpE,UAAInC,YAAJ,EAAkB;AAChB8B,QAAAA,cAAc;AACf;AACF,KAJ8B,CADa;AAM5C,eAAWlD,oBAAoB,CAC7BqD,WAAW,CAAC1B,KAAZ,CAAkB6B,OADW,EAE7BV,aAF6B,CANa;AAU5C,cAAU9C,oBAAoB,CAC5BqD,WAAW,CAAC1B,KAAZ,CAAkB8B,MADU,EAE5BP,cAF4B,CAVc;AAc5C,oBAAgBlD,oBAAoB,CAClCqD,WAAW,CAAC1B,KAAZ,CAAkB+B,YADgB,EAElCZ,aAFkC,CAdQ;AAkB5C,oBAAgB9C,oBAAoB,CAClCqD,WAAW,CAAC1B,KAAZ,CAAkBgC,YADgB,EAElCT,cAFkC,CAlBQ;AAsB5C,WAAOjD,SAAS,CAAC,CAACoD,WAAW,CAACO,GAAb,EAAkBtB,SAAlB,CAAD,CAtB4B;AAwB5C,wBAAoBb,MAAM,GAAGiB,SAAH,GAAed;AAxBG,GAAhC,CAAd;AA2BA9B,EAAAA,sBAAsB,CAAC;AACrB+D,IAAAA,OAAO,EAAEpC,MADY;AAErBqC,IAAAA,QAAQ,EAAE,MAAMhC,SAAS,CAAC,KAAD;AAFJ,GAAD,CAAtB,CA7FmB,CAiGnB;;AACA,MAAItB,qBAAqB,CAACmB,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,0CACG0B,WADH,EAEG5B,MAAM,iBACL,oBAAC,gBAAD,qBACE,oBAAC,kBAAD;AACE,IAAA,OAAO,EAAE;AAAEsC,MAAAA,OAAO,EAAE;AAAX,KADX;AAEE,IAAA,OAAO,EAAE;AAAEA,MAAAA,OAAO,EAAE,CAAX;AAAcC,MAAAA,UAAU,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ;AAA1B,KAFX;AAGE,IAAA,IAAI,EAAE;AAAEF,MAAAA,OAAO,EAAE,CAAX;AAAcC,MAAAA,UAAU,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ;AAA1B,KAHR;AAIE,IAAA,OAAO,EAAExC,MAJX;AAKE,IAAA,KAAK,EAAErB,UAAU,CAAC8D;AALpB,kBAOE,oBAAC,MAAD;AACE,IAAA,UAAU,EAAE5B,SADd;AAEE,IAAA,OAAO,EAAE,MAAMR,SAAS,CAAC,KAAD,CAF1B;AAGE,IAAA,SAAS,EAAEb,SAHb;AAIE,IAAA,MAAM,EAAEI;AAJV,kBAME,oBAAC,MAAD,CAAQ,OAAR;AAAgB,IAAA,MAAM,EAAEI;AAAxB,KACGF,QAAQ,iBACP,oBAAC,MAAD,CAAQ,KAAR;AACE,IAAA,WAAW,EAAC,aADd;AAEE,IAAA,eAAe,EAAEW,OAFnB;AAGE,IAAA,MAAM,EAAEV,SAHV;AAIE,IAAA,KAAK,EAAEA;AAJT,IAFJ,eASE,oBAAC,GAAD,eACMK,aADN;AAEE;AACA,IAAA,iBAAiB,EACf1B,QAAQ,CAACgE,EAAT,KAAgB,KAAhB,GAAwB,SAAxB,GAAoCvC,SAJxC;AAME,IAAA,QAAQ,EAAEc;AANZ,MAQG9B,KARH,CATF,CANF,CAPF,CADF,CAHJ,CADF;AA4CD,CAjKM","sourcesContent":["import { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport { useControllableState, useKeyboardDismissable } from '../../../hooks';\nimport { Popper } from '../Popper';\nimport { composeEventHandlers, mergeRefs } from '../../../utils';\nimport { PresenceTransition } from '../Transitions';\nimport { Platform, StyleSheet } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport Box from '../../primitives/Box';\nimport type { ITooltipProps } from './types';\nimport { useId } from '@react-native-aria/utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { uniqueId } from 'lodash';\nimport { ResponsiveQueryContext } from '../../../utils/useResponsiveQuery/ResponsiveQueryProvider';\n\nexport const Tooltip = ({\n  label,\n  children,\n  onClose,\n  onOpen,\n  defaultIsOpen,\n  placement,\n  openDelay = 0,\n  closeDelay = 0,\n  closeOnClick = true,\n  offset,\n  isDisabled,\n  hasArrow,\n  arrowSize = 12,\n  isOpen: isOpenProp,\n  ...props\n}: ITooltipProps) => {\n  if (hasArrow && offset === undefined) {\n    offset = 0;\n  } else {\n    offset = 6;\n  }\n\n  const resolvedProps = usePropsResolution('Tooltip', props);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: (value) => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    },\n  });\n\n  const arrowBg =\n    props.backgroundColor ?? props.bgColor ?? props.bg ?? resolvedProps.bg;\n\n  const targetRef = React.useRef(null);\n\n  const enterTimeout = React.useRef<any>();\n  const exitTimeout = React.useRef<any>();\n  // const tooltipID = '';\n  // const tooltipID = useId();\n\n  let tooltipID = uniqueId();\n\n  // let id = uniqueId();\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  if (!disableCSSMediaQueries) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    tooltipID = useId();\n  }\n\n  const openWithDelay = React.useCallback(() => {\n    if (!isDisabled) {\n      enterTimeout.current = setTimeout(() => setIsOpen(true), openDelay);\n    }\n  }, [isDisabled, setIsOpen, openDelay]);\n\n  const closeWithDelay = React.useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current);\n    }\n    exitTimeout.current = setTimeout(() => setIsOpen(false), closeDelay);\n  }, [closeDelay, setIsOpen]);\n\n  React.useEffect(\n    () => () => {\n      clearTimeout(enterTimeout.current);\n      clearTimeout(exitTimeout.current);\n    },\n    []\n  );\n\n  let newChildren = children;\n\n  if (typeof children === 'string') {\n    newChildren = <Box>{children}</Box>;\n  }\n\n  newChildren = React.cloneElement(newChildren, {\n    'onPress': composeEventHandlers<any>(newChildren.props.onPress, () => {\n      if (closeOnClick) {\n        closeWithDelay();\n      }\n    }),\n    'onFocus': composeEventHandlers<any>(\n      newChildren.props.onFocus,\n      openWithDelay\n    ),\n    'onBlur': composeEventHandlers<any>(\n      newChildren.props.onBlur,\n      closeWithDelay\n    ),\n    'onMouseEnter': composeEventHandlers<any>(\n      newChildren.props.onMouseEnter,\n      openWithDelay\n    ),\n    'onMouseLeave': composeEventHandlers<any>(\n      newChildren.props.onMouseLeave,\n      closeWithDelay\n    ),\n    'ref': mergeRefs([newChildren.ref, targetRef]),\n\n    'aria-describedby': isOpen ? tooltipID : undefined,\n  });\n\n  useKeyboardDismissable({\n    enabled: isOpen,\n    callback: () => setIsOpen(false),\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <>\n      {newChildren}\n      {isOpen && (\n        <OverlayContainer>\n          <PresenceTransition\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1, transition: { duration: 150 } }}\n            exit={{ opacity: 0, transition: { duration: 100 } }}\n            visible={isOpen}\n            style={StyleSheet.absoluteFill}\n          >\n            <Popper\n              triggerRef={targetRef}\n              onClose={() => setIsOpen(false)}\n              placement={placement}\n              offset={offset}\n            >\n              <Popper.Content isOpen={isOpen}>\n                {hasArrow && (\n                  <Popper.Arrow\n                    borderColor=\"transparent\"\n                    backgroundColor={arrowBg}\n                    height={arrowSize}\n                    width={arrowSize}\n                  />\n                )}\n                <Box\n                  {...resolvedProps}\n                  //@ts-ignore\n                  accessibilityRole={\n                    Platform.OS === 'web' ? 'tooltip' : undefined\n                  }\n                  nativeID={tooltipID}\n                >\n                  {label}\n                </Box>\n              </Popper.Content>\n            </Popper>\n          </PresenceTransition>\n        </OverlayContainer>\n      )}\n    </>\n  );\n};\n"]}