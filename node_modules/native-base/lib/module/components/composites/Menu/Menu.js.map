{"version":3,"sources":["Menu.tsx"],"names":["React","memo","forwardRef","Box","usePropsResolution","Popper","AccessibilityInfo","ScrollView","useControllableState","useMenuTrigger","useMenu","useMenuTypeahead","Backdrop","PresenceTransition","FocusScope","MenuContext","Overlay","useHasResponsiveProps","Menu","trigger","closeOnSelect","children","onOpen","onClose","isOpen","isOpenProp","defaultIsOpen","placement","props","ref","triggerRef","useRef","setIsOpen","value","defaultValue","onChange","_overlay","_presenceTransition","_backdrop","useRNModal","resolvedProps","handleOpen","useCallback","handleClose","triggerProps","updatedTrigger","onPress","open","useEffect","announceForAccessibility","MenuContent","menuRef","menuProps","typeaheadProps"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IMenuProps } from './types';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Popper } from '../Popper';\nimport { AccessibilityInfo, ScrollView } from 'react-native';\nimport { useControllableState } from '../../../hooks';\nimport { useMenuTrigger, useMenu, useMenuTypeahead } from './useMenu';\nimport Backdrop from '../Backdrop';\nimport { PresenceTransition } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { MenuContext } from './MenuContext';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Menu = (\n  {\n    trigger,\n    closeOnSelect = true,\n    children,\n    onOpen,\n    onClose,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    placement = 'bottom left',\n    ...props\n  }: IMenuProps,\n  ref?: any\n) => {\n  const triggerRef = React.useRef(null);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: (value) => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    },\n  });\n\n  const {\n    _overlay,\n    _presenceTransition,\n    _backdrop,\n    useRNModal,\n    ...resolvedProps\n  } = usePropsResolution('Menu', props);\n  const handleOpen = React.useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  const handleClose = React.useCallback(() => {\n    setIsOpen(false);\n  }, [setIsOpen]);\n\n  const triggerProps = useMenuTrigger({\n    handleOpen,\n    isOpen,\n  });\n\n  const updatedTrigger = () => {\n    return trigger(\n      {\n        ...triggerProps,\n        ref: triggerRef,\n        onPress: handleOpen,\n      },\n      { open: isOpen }\n    );\n  };\n\n  React.useEffect(() => {\n    if (isOpen) {\n      AccessibilityInfo.announceForAccessibility('Popup window');\n    }\n  }, [isOpen]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n  return (\n    <>\n      {updatedTrigger()}\n      <Overlay\n        isOpen={isOpen}\n        onRequestClose={handleClose}\n        useRNModalOnAndroid\n        useRNModal={useRNModal}\n        {..._overlay}\n        unmountOnExit\n      >\n        <PresenceTransition visible={isOpen} {..._presenceTransition}>\n          <Popper\n            triggerRef={triggerRef}\n            onClose={handleClose}\n            placement={placement}\n            {...resolvedProps}\n          >\n            <Backdrop onPress={handleClose} {..._backdrop} />\n            <Popper.Content isOpen={isOpen}>\n              <MenuContext.Provider\n                value={{ closeOnSelect, onClose: handleClose }}\n              >\n                <FocusScope contain restoreFocus autoFocus>\n                  <MenuContent menuRef={ref} {...resolvedProps}>\n                    {children}\n                  </MenuContent>\n                </FocusScope>\n              </MenuContext.Provider>\n            </Popper.Content>\n          </Popper>\n        </PresenceTransition>\n      </Overlay>\n    </>\n  );\n};\n\nconst MenuContent = ({\n  menuRef,\n  children,\n  ...props\n}: Omit<IMenuProps, 'trigger'> & { menuRef: any }) => {\n  const menuProps = useMenu();\n  const typeaheadProps = useMenuTypeahead(menuProps);\n\n  return (\n    <Box {...props} {...menuProps} {...typeaheadProps} ref={menuRef}>\n      <ScrollView>{children}</ScrollView>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Menu));\n"]}