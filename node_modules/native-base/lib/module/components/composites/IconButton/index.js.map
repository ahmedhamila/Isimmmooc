{"version":3,"sources":["index.tsx"],"names":["React","memo","forwardRef","Pressable","Icon","usePropsResolution","useHasResponsiveProps","composeEventHandlers","useHover","useFocus","useIsPressed","useFocusRing","merge","IconButton","icon","_icon","pseudoIconProp","children","isHovered","isHoveredProp","isPressed","isPressedProp","isFocused","isFocusedProp","isFocusVisible","isFocusVisibleProp","isDisabled","props","ref","hoverProps","pressableProps","focusProps","focusRingProps","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","resolvedProps","clonedIcon","cloneElement"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Pressable } from '../../primitives/Pressable';\nimport { Icon } from '../../primitives/Icon';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { composeEventHandlers } from '../../../utils';\nimport type { IIconButtonProps } from './types';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport merge from 'lodash.merge';\n\nconst IconButton = (\n  {\n    icon,\n    _icon: pseudoIconProp,\n    children,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    isDisabled,\n    ...props\n  }: IIconButtonProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution(\n    'IconButton',\n    { ...props, _icon: merge({}, pseudoIconProp, icon?.props) },\n    {\n      isHovered: isHoveredProp || isHovered,\n      isPressed: isPressedProp || isPressed,\n      isFocused: isFocusedProp || isFocused,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n      isDisabled,\n    }\n  );\n\n  let clonedIcon;\n  if (icon) {\n    clonedIcon = React.cloneElement(icon, {\n      ..._icon,\n    });\n  }\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Pressable\n      disabled={isDisabled}\n      accessibilityRole=\"button\"\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n    >\n      {clonedIcon || <Icon {..._icon}>{children}</Icon>}\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(IconButton));\nexport type { IIconButtonProps };\n"]}